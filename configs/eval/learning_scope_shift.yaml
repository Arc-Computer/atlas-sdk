agent:
  type: openai
  name: runtime-learning-scope-shift
  system_prompt: |
    You are the Atlas Student. Highlight cross-incident generalisations, call out known playbook gaps, and keep outputs within the schema below.
    JSON schema:
    {
      "summary": string,
      "diagnostics": string[],
      "mitigations": string[],
      "communications": string[],
      "evidence": string[]
    }
  tools: []
  llm:
    provider: openai
    model: gpt-5-mini
    api_key_env: OPENAI_API_KEY
    temperature: 0.25
    max_output_tokens: 4096
    timeout_seconds: 240
  response_format:
    type: json_object

student:
  max_plan_tokens: 4096
  max_step_tokens: 4096
  max_synthesis_tokens: 2048
  tool_choice: auto

teacher:
  llm:
    provider: openai
    model: gpt-5-mini
    api_key_env: OPENAI_API_KEY
    temperature: 0.1
    max_output_tokens: 4096
    timeout_seconds: 240

orchestration:
  max_retries: 1
  step_timeout_seconds: 900

rim:
  small_model:
    provider: gemini
    model: gemini/gemini-2.5-flash
    api_key_env: GEMINI_API_KEY
    max_output_tokens: 8096
  large_model:
    provider: gemini
    model: gemini/gemini-2.5-flash
    api_key_env: GEMINI_API_KEY
    max_output_tokens: 8096
  judge_prompt: 'reward the agent for uncovering reusable mitigations and documenting deltas vs prior incidents'
  variance_threshold: 0.15
  uncertainty_threshold: 0.3

storage:
  database_url: postgresql://atlas:atlas@localhost:5433/atlas
  min_connections: 1
  max_connections: 5
  statement_timeout_seconds: 30

learning:
  enabled: true
  update_enabled: true
  llm:
    provider: gemini
    model: gemini/gemini-2.5-flash
    api_key_env: GEMINI_API_KEY
    temperature: 0.15
    max_output_tokens: 8192
    timeout_seconds: 120
  prompts:
    synthesizer: |
      Role: Atlas learning synthesizer. Respond with strict JSON only (no prose, markdown, or explanations).

      Required schema (match exactly — do not add/rename fields):
      {
        "version": "playbook_entry.v1",
        "student_pamphlet": string | null,
        "teacher_pamphlet": string | null,
        "playbook_entries": [
          {
            "id": string | null,
            "audience": "student" | "teacher",
            "cue": {
              "type": "regex" | "keyword" | "predicate",
              "pattern": string,
              "description": string | null
            },
            "action": {
              "imperative": string,
              "runtime_handle": string,
              "tool_name": string | null,
              "arguments": object | null
            },
            "expected_effect": string,
            "scope": {
              "category": "reinforcement" | "differentiation",
              "constraints": string,
              "applies_when": string | null
            },
            "metadata": object | null
          }
        ],
        "session_student_learning": string | null,
        "session_teacher_learning": string | null,
        "metadata": object | null
      }

      Rules:
      - Preserve existing reinforcement entries when they remain helpful; add differentiation entries only when they address failures or expand coverage beyond the originating incident.
      - Every cue must be machine-detectable (`type` + concise `pattern`). Use lowercase phrases; avoid capitalised proper nouns unless they are allowed (SQL, HTTP, JSON, Atlas, API, Reward, Include).
      - Every action must contain an imperative verb phrase and a valid runtime handle from the allowlist/prefix list. Allowed handles:
        logs.search, logs.tail, logs.filter, metrics.query, metrics.compare, metrics.alert_ack, data.query.run, data.query.sql, data.query.vector,
        alerts.notify, alerts.page, tickets.escalate, tickets.create, tickets.update, workflows.retry, workflows.rollback, workflows.trigger,
        incidents.open, incidents.update, incidents.close, runbooks.fetch, runbooks.update, security.rotate_credentials, security.patch.apply,
        diagnostics.trace.inspect, automation.trigger, playbooks.update.
        (You may also use prefixes logs., metrics., data., alerts., tickets., workflows., incidents., runbooks., security., diagnostics., automation., playbooks.) Use the most specific handle that fits the action.
      - `expected_effect` must articulate the efficiency or transfer hypothesis in plain lowercase language (no title case).
      - Keep `cue.pattern`, `action.imperative`, `expected_effect`, and `scope.constraints` concise (≤ 140 characters) and avoid camel case or acronyms unless necessary (use lowercase phrases like "mean time to recovery").
      - Populate `metadata.origin_incident` when available so entries retain provenance.
      - Keep pamphlets ≤550 words with numbered/bulleted, imperative statements that the runtime can cite.
      - Emit at most one new differentiation entry per synthesis and ensure `scope.applies_when` clarifies when reuse is safe across incidents.
  history_limit: 10
  apply_to_prompts: true
  schema:
    allowed_runtime_handles:
      - logs.search
      - logs.tail
      - logs.filter
      - metrics.query
      - metrics.compare
      - metrics.alert_ack
      - data.query.run
      - data.query.sql
      - data.query.vector
      - alerts.notify
      - alerts.page
      - tickets.escalate
      - tickets.create
      - tickets.update
      - workflows.retry
      - workflows.rollback
      - workflows.trigger
      - incidents.open
      - incidents.update
      - incidents.close
      - runbooks.fetch
      - runbooks.update
      - security.rotate_credentials
      - security.patch.apply
      - diagnostics.trace.inspect
    runtime_handle_prefixes:
      - logs.
      - metrics.
      - data.
      - alerts.
      - tickets.
      - workflows.
      - incidents.
      - runbooks.
      - security.
      - diagnostics.
      - automation.
      - playbooks.
    default_scope_category: differentiation
  usage_tracking:
    enabled: true
    capture_examples: true
    max_examples_per_entry: 3
  gates:
    enforce_actionability: true
    enforce_cue: true
    enforce_generality: true
    max_text_length: 420
    allowed_proper_nouns:
      - SQL
      - HTTP
      - JSON
      - Atlas
      - API
      - Reward
      - Include
    banned_incident_tokens:
      - postmortem
    allow_length_overflow_margin: 40

metadata:
  experiment:
    name: 20251029_scope_shift_prompt
    learning_key: runtime.synthetic.scope_shift
    seed: 20251029
